{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","src","alt","CardList","props","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","message","this","setState","Component","App","onSearchChange","event","searchTerm","target","value","fetch","then","response","json","users","filterRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gNAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAG,+BAA0BH,EAA1B,iBAA6CI,IAAI,SACzD,6BACI,4BAAKL,GACL,2BAAIE,MCWLI,EAfE,SAACC,GACd,OACI,6BAEQA,EAAMC,OAAOC,KAAI,SAACC,EAAOC,GACrB,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EACfX,KAAMU,EAAMV,KACZC,GAAIS,EAAMT,GACVC,MAAOQ,EAAMR,aCFtBW,EARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,2BAAOX,UAAU,mCAAmCY,KAAK,SAASC,YAAY,oBAAoBC,SAAYH,MCK3GI,EARA,SAACX,GACZ,OACI,yBAAKY,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEf,EAAMgB,WCiBJC,G,kBAnBX,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KACDkB,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,iDAEJG,KAAKtB,MAAMgB,a,GAhBEQ,cC+CbC,E,YAvCX,aAAe,IAAD,8BACV,+CAMJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,WAAYD,EAAME,OAAOC,SANxC,EAAKZ,MAAQ,CACTU,WAAa,GACb3B,OAAQ,IAJF,E,iFAWO,IAAD,OAChB8B,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BAIrB,IAAD,OACCC,EAAed,KAAKJ,MAAMjB,OAAOoC,QAAO,SAAAlC,GAC1C,OAAOA,EAAMV,KAAK6C,cAAcC,SAAS,EAAKrB,MAAMU,eAExD,OACI,yBAAKhC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,OAAQmC,W,GAhCxBZ,aCGEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.a8ad0530.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({name, id, email}) => {\n    return (\n        <div className=\"tc bg-light-green dib pa2 ma2 grow shadow-2 br3\">\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robo\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import Card from \"./Card\";\nimport React from \"react\";\n\n\nconst CardList = (props) => {\n    return (\n        <div>\n            {\n                props.robots.map((robot, i) => {\n                    return (<Card key={i}\n                        name={robot.name}\n                        id={robot.id}\n                        email={robot.email} />);\n                })\n        }\n        </div>\n    );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div>\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search for robots\" onChange = {searchChange} />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '700px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, message) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>ERROR ERROR ERROR</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport { robots } from \"../components/robots\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            searchTerm:  \"\",\n            robots: []\n        }\n    }\n    onSearchChange = (event) => {\n        this.setState({searchTerm: event.target.value});\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(response => {\n            return response.json();\n        })\n        .then(users => {\n            this.setState({robots: users});\n        })\n    }\n\n    render() {\n        const filterRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchTerm);\n        });\n        return (\n            <div className=\"tc\">\n                <h1 className=\"f1\" >Robofriends</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filterRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { directive } from '@babel/types';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}